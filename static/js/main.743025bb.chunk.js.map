{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","searchChange","event","setState","animate_text","target","value","colourChange","colour","waveChange","wave","rotateChange","rotate","state","className","this","onChange","React","Component","Options","AnimationBox","splittext","GraphemeSplitter","splitGraphemes","id","map","letter","index","style","TextBox","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAIMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,aAAe,SAACC,GACd,EAAKC,SAAS,CAACC,aAAcF,EAAMG,OAAOC,SAXzB,EAcnBC,aAAe,SAACL,GACd,EAAKC,SAAS,CAACK,OAAQN,EAAMG,OAAOC,SAfnB,EAkBnBG,WAAa,SAACP,GACZ,EAAKC,SAAS,CAACO,KAAMR,EAAMG,OAAOC,SAnBjB,EAsBnBK,aAAe,SAACT,GACd,EAAKC,SAAS,CAACS,OAAQV,EAAMG,OAAOC,SArBpC,EAAKO,MAAQ,CACXT,aAAc,8BACdI,OAAQ,QACRE,KAAM,OACNE,OAAQ,QANO,E,qDA2BjB,OACE,6BACE,yBAAKE,UAAa,cAChB,kBAAC,EAAD,CACAV,aAAcW,KAAKF,MAAMT,aACzBY,SAAYD,KAAKd,eACjB,kBAAC,EAAD,CACAM,aAAcQ,KAAKR,aACnBE,WAAYM,KAAKN,WACjBE,aAAcI,KAAKJ,gBAErB,yBAAKG,UAAa,iBAChB,kBAAC,EAAD,CACAV,aAAgBW,KAAKF,MAAMT,aAC3BI,OAAUO,KAAKF,MAAML,OACrBE,KAAQK,KAAKF,MAAMH,KACnBE,OAAUG,KAAKF,MAAMD,e,GA5CbK,IAAMC,WAoDlBC,EAAU,SAAC,GAA8C,IAA7CZ,EAA4C,EAA5CA,aAAcE,EAA8B,EAA9BA,WAAYE,EAAkB,EAAlBA,aAC1C,OACE,0BAAMG,UAAW,eACf,wCACE,4BAAQE,SAAUT,GAChB,4BAAQD,MAAM,SAAd,SACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,WAAd,aAGJ,sCACE,4BAAQU,SAAUP,GAChB,4BAAQH,MAAM,QAAd,OACA,4BAAQA,MAAM,OAAd,QAGJ,wCACE,4BAAQU,SAAUL,GAChB,4BAAQL,MAAM,QAAd,OACA,4BAAQA,MAAM,OAAd,UAQJc,EAAe,SAAC,GAA0C,IAAzChB,EAAwC,EAAxCA,aAAcI,EAA0B,EAA1BA,OAAQE,EAAkB,EAAlBA,KAAME,EAAY,EAAZA,OAE3CS,GADW,IAAIC,KACMC,eAAenB,GAC1C,OACE,yBAAKoB,GAAG,aAAaV,UAAY,WAC/B,yBAAKU,GAAG,YAAYV,UAAa,mBAAqBF,GACpD,yBAAKY,GAAG,YAAYV,UAAaN,GAC/B,yBAAKgB,GAAG,UAAUV,UAAY,iBAC3BO,EAAUI,KAAI,SAACC,EAAQC,GACtB,MAAe,MAAXD,EAAuB,yBAAKZ,UAAaJ,EAAMkB,MAAO,CAAC,kBAAmBD,EAAM,GAAG,MAA5D,QACf,yBAAKb,UAAaJ,EAAMkB,MAAO,CAAC,kBAAkBD,EAAM,GAAG,MAAOD,WAUtFG,EAAU,SAAC,GAA8B,IAA7BzB,EAA4B,EAA5BA,aAAcY,EAAc,EAAdA,SAC9B,OACI,2BACAc,KAAM,OACNxB,MAASF,EACTY,SAAYA,KAIHjB,ICxGKgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.743025bb.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport GraphemeSplitter from 'grapheme-splitter';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      animate_text: \"Hello Sakura, Hugo, & Jack!\",\n      colour: \"black\",\n      wave: \"woff\",\n      rotate: \"roff\"\n    };\n  }\n\n  searchChange = (event) => {\n    this.setState({animate_text: event.target.value});\n  }\n\n  colourChange = (event) => {\n    this.setState({colour: event.target.value});\n  }\n\n  waveChange = (event) => {\n    this.setState({wave: event.target.value});\n  }\n\n  rotateChange = (event) => {\n    this.setState({rotate: event.target.value});\n  }\n\n  render() {\n    return (\n      <div>\n        <div className = {\"top-centre\"}>\n          <TextBox \n          animate_text={this.state.animate_text}\n          onChange = {this.searchChange}/>\n          <Options \n          colourChange={this.colourChange}\n          waveChange={this.waveChange}\n          rotateChange={this.rotateChange}/>\n        </div>\n        <div className = {\"centre-screen\"}>\n          <AnimationBox\n          animate_text = {this.state.animate_text}\n          colour = {this.state.colour}\n          wave = {this.state.wave}\n          rotate = {this.state.rotate} \n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nconst Options = ({colourChange, waveChange, rotateChange}) => {\n  return (\n    <form className={\"options-row\"}>\n      <label>Colour\n        <select onChange={colourChange}>\n          <option value=\"black\">Black</option>\n          <option value=\"red\">Red</option>\n          <option value=\"blue\">Blue</option>\n          <option value=\"green\">Green</option>\n          <option value=\"yellow\">Yellow</option>\n          <option value=\"pink\">Pink</option>\n          <option value=\"rainbow\">Rainbow</option>\n        </select>\n      </label>\n      <label>Wave\n        <select onChange={waveChange}>\n          <option value=\"woff\">Off</option>\n          <option value=\"won\">On</option>\n        </select>\n      </label>\n      <label>Rotate\n        <select onChange={rotateChange}>\n          <option value=\"roff\">Off</option>\n          <option value=\"ron\">On</option>\n        </select>\n      </label>\n      \n    </form>\n  )\n}\n\nconst AnimationBox = ({animate_text, colour, wave, rotate}) => {\n  const splitter = new GraphemeSplitter();\n  const splittext = splitter.splitGraphemes(animate_text);\n  return (\n    <div id=\"defaultdiv\" className = \"default\">\n      <div id=\"rotatediv\" className = {\"rotatecontainer \" + rotate}>\n        <div id=\"colourdiv\" className = {colour}>\n          <div id=\"wavediv\" className = \"wavecontainer\">\n            {splittext.map((letter, index)=> {\n              if (letter === ' ') return <div className = {wave} style={{\"animation-delay\": index/10+'s'}}>&#160;</div>;\n              else return <div className = {wave} style={{\"animation-delay\":index/10+'s'}}>{letter}</div>;\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\nconst TextBox = ({animate_text, onChange}) => {\n  return (\n      <input \n      type= \"text\"\n      value = {animate_text}\n      onChange = {onChange}/>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}